#!/usr/bin/lua
--[[
#
# call2mac is an example program for encoding amateur radio callsigns into
# mac addresses.
#
# usage: call2mac [-v] [arg1 [arg2 ..] ]
#        call2mac autodetermines if the arg is a mac address or a callsign -
#        which makes the program very easy to use.
# see
#   http://db0fhn.efi.fh-nuernberg.de/doku.php?id=projects:wlan:proposal
# for reference of this proposed standard.
#
# License: GPL (http://www.fsf.org/)
#
# (c) 2011 Thomas Ries, HB9XAR
# based on call2mac.py (python version) from Thomas Osterried  DL9SAU
#
#
]]
-- ------------------------------------------------------------------------
function call2mac(buf)
  FLAG_LA=1 -- 0: global unique 1: local assignment
  FLAG_BC=0 -- 0: unicast 1: group / multicast

  mac = {}
  ssid = 0

  buf = string.upper(buf)

  for i= 1, string.len(buf) do
    c=buf:sub(i,i)
    if (c == '-') then
      break
    end
    if (#mac > 5) then
      return nil
    end
    mac[#mac+1]=(c:byte()-32) *4
  end

  while (#mac < 6) do
    mac[#mac+1]=0
  end

  sep = buf:find('-')
  if (sep) then
    ssid = tonumber(buf:sub(sep+1,-1))
  end

  if ((ssid < 0) or (ssid > 0xff)) then
    return nil
  end

  for i=0,4 do
    mac[6-i] = mac[6-i] + (ssid % 4)
    ssid = math.floor(ssid / 4)
  end
  mac[1] = mac[1] + (FLAG_LA*2) + FLAG_BC

  s=nil
  
  for i=1, #mac do
    t=string.format("%2.2X", mac[i])
    if (not s) then
      s = t
    else
      s = s .. ":" .. t
    end
  end

  return s
end

-- ------------------------------------------------------------------------
function mac2call(buf)
  buf = string.upper(buf)

  mac = {buf:match( ("([0-9A-F][0-9A-F])".."\:"):rep(6) .. "?" )}
  if (#mac ~= 6) then
    return nil
  end

  call=""
  ssid=0

  for i=1, #mac do
    l=0
    for j=1,2 do
      d=mac[i]:sub(j,j)
      if (d > '9') then
        di=d:byte() - ('A'):byte() + 10
      else
        di=d:byte() - ('0'):byte()
      end

      l = (l * 16) + di
    end
    call = call .. string.format("%c", (math.floor(l/4)) +32)
    ssid = ssid * 4 + (l % 4)

  end

  return call, ssid % 256, (math.floor(ssid/256)) % 16
end

-- ------------------------------------------------------------------------
-- main
-- ------------------------------------------------------------------------

argc=#arg
firstarg=1

if argc > 0 then
  verbose=0
  if (arg[firstarg] == '-v') then
    verbose=1
    firstarg=firstarg+1
    argc = argc-1
  end
end

if argc > 0 then
  for i=firstarg, #arg do
    a=arg[i]
    if string.find(a, ':') then
      -- is a MAC
      call,ssid,flags=mac2call(a)
      if (call) then
        if (verbose>0) then
          print ("Mac:".. a .." Call:".. call .. 
                 " SSID:" .. ssid .. " Flags:" .. flags % 8)
        else
          print(call .. "-" .. ssid)
        end
      else
        print "*** Error"
      end
    else
      -- is a callsign
      mac=call2mac(a)
      if (mac) then
        if (verbose>0) then
          print ("Call:".. a .. " Mac:" .. mac)
        else
          print(mac)
        end
      else
        print "*** Error"
      end
    end
  end
end
